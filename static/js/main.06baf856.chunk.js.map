{"version":3,"sources":["logo.svg","QuizData.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuizData","id","question","options","answer","Quiz","props","loadQuiz","currentIndex","state","setState","nextQuestionHandler","userAnswer","score","checkAnswer","disabled","finishHandler","length","quizEnd","this","prevProps","prevState","map","option","key","className","onClick","Component","App","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,4JCA9BC,EAAW,CACpB,CACIC,GAAI,EACJC,SAAU,gMACVC,QAAS,CAAC,eAAM,sBAChBC,OAAQ,gBAGZ,CACIH,GAAI,EACJC,SAAU,sIACVC,QAAS,CAAC,gEAAe,wHAA0B,iEAA1C,iGACTC,OAAO,iGAEX,CACIH,GAAI,EACJC,SAAU,uWACVC,QAAS,CAAC,eAAK,sBACfC,OAAO,gBAEX,CACIH,GAAI,EACJC,SAAU,4NACVC,QAAS,CAAC,eAAK,sBACfC,OAAO,gBAEX,CACIH,GAAI,EACJC,SAAU,2TACVC,QAAS,CAAC,eAAD,sBACTC,OAAO,sBAEX,CACIH,GAAI,EACJC,SAAU,uGACVC,QAAS,CAAC,eAAM,sBAChBC,OAAO,yCC0GAC,G,MA3If,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,SAAW,WAAO,IACPC,EAAgB,EAAKC,MAArBD,aACP,EAAKE,UAAS,WACV,MAAO,CACHR,SAAUF,EAASQ,GAAcN,SACjCC,QAAQH,EAASQ,GAAcL,QAC/BC,OAAQJ,EAASQ,GAAcJ,YAjBzB,EAqBlBO,oBAAsB,WAAM,IAAD,EACa,EAAKF,MAAlCG,EADgB,EAChBA,WAAYR,EADI,EACJA,OAAQS,EADJ,EACIA,MAGxBD,GAAcR,GACb,EAAKM,SAAS,CACVG,MAAOA,EAAQ,IAGvB,EAAKH,SAAS,CACVF,aAAc,EAAKC,MAAMD,aAAe,EACxCI,WAAY,QAhCF,EAsClBE,YAAc,SAAAV,GACV,EAAKM,SAAS,CACVE,WAAYR,EACZW,UAAU,KAzCA,EA2DlBD,YAAc,SAAAV,GACV,EAAKM,SAAS,CACVE,WAAYR,EACZW,UAAS,KA9DC,EAiElBC,cAAe,WAGR,EAAKP,MAAMD,eAAiBR,EAASiB,OAAS,GAC7C,EAAKP,SAAS,CACVQ,SAAQ,KApEhB,EAAKT,MAAQ,CACTG,WAAY,KACZJ,aAAc,EACdL,QAAS,GACTe,SAAS,EACTL,MAAO,EACPE,UAAU,GARA,EADtB,gEAqCQI,KAAKZ,aArCb,yCA6CuBa,EAAWC,GAAW,IAC/Bb,EAAgBW,KAAKV,MAArBD,aACHW,KAAKV,MAAMD,eAAiBa,EAAUb,cACrCW,KAAKT,UAAS,WACV,MAAO,CACHK,UAAU,EACVb,SAAUF,EAASQ,GAAcN,SACjCC,QAAUH,EAASQ,GAAcL,QACjCC,OAAQJ,EAASQ,GAAcJ,aArDnD,+BA8Ea,IAAD,SAC0De,KAAKV,MAA7DP,EADF,EACEA,SAAUC,EADZ,EACYA,QAASK,EADrB,EACqBA,aAAcI,EADnC,EACmCA,WACvC,OAFI,EAC+CM,QAE5CC,KAAKV,MAAMI,MAAQ,EAEX,6BACH,oKAAiCM,KAAKV,MAAMI,MAA5C,KACA,0KAOA,6BACA,oKAAiCM,KAAKV,MAAMI,MAA5C,KACA,qGAcR,6BACI,4BAAKX,GAEL,6EAAiBM,EAAe,EAAhC,yBAAwCR,EAASiB,QAAjD,KAEId,EAAQmB,KAAI,SAAAC,GAAM,OACd,uBAAGC,IAAOD,EAAOtB,GAAIwB,UAAS,kBAAab,IAAeW,EAAQ,WAAY,MAC9EG,QAAW,kBAAM,EAAKZ,YAAYS,KAE7BA,MAMb,kIAAwBJ,KAAKV,MAAMI,OACtCL,EAAeR,EAASiB,OAAS,GAClC,4BAAQF,SAAYI,KAAKV,MAAMM,SAAUW,QAAWP,KAAKR,qBAAzD,wCAICH,GAAgBR,EAASiB,OAAS,GACnC,4BAAQS,QAAUP,KAAKH,cAAeD,SAAYI,KAAKV,MAAMM,UAA7D,uCAlIZ,GAA0BY,cCG1B,SAASC,IACP,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,OAMSG,QACTC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAAaJ,GCLTK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,SDyHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06baf856.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const QuizData = [\r\n    {\r\n        id: 0,\r\n        question: 'Был ли диабет у кого-то из вашей семьи?',\r\n        options: [`да`, 'нет'],\r\n        answer: 'да'\r\n    },\r\n\r\n    {\r\n        id: 1,\r\n        question: 'Как часто вы едите фрукты?',\r\n        options: ['каждый день', 'несколько раз в неделю', 'раз в неделю', `реже раза в неделю`],\r\n        answer: `реже раза в неделю`\r\n    },\r\n    {\r\n        id: 2,\r\n        question: 'Принимали ли вы антигипертензивные препараты на регулярной основе?',\r\n        options: [`да`,'нет'],\r\n        answer: `да`\r\n    },\r\n    {\r\n        id: 3,\r\n        question: 'Находили ли у вас повышение глюкозы крови?',\r\n        options: [`да`,'нет'],\r\n        answer: `да`\r\n    },\r\n    {\r\n        id: 4,\r\n        question: 'Делаете ли вы физические упражнения не менее 3 часов в неделю?',\r\n        options: [`да`,`нет`],\r\n        answer: `нет`       \r\n    },\r\n    {\r\n        id: 5,\r\n        question: 'Долгим ли был опрос?',\r\n        options: [`да`, 'нет'],\r\n        answer: `дальше`\r\n        \r\n    },\r\n\r\n]\r\n\r\n\r\n\r\n\r\n    \r\n","import React, {Component} from 'react'\r\nimport {QuizData} from './QuizData'\r\nimport './style.css'\r\nexport class Quiz extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state  ={\r\n            userAnswer: null,\r\n            currentIndex: 0,\r\n            options: [],\r\n            quizEnd: false,\r\n            score: 0,\r\n            disabled: true\r\n        }\r\n    } \r\n    loadQuiz = () => {\r\n        const {currentIndex} = this.state;\r\n        this.setState(() => {\r\n            return {\r\n                question: QuizData[currentIndex].question,\r\n                options:QuizData[currentIndex].options,\r\n                answer: QuizData[currentIndex].answer\r\n            }\r\n        })\r\n    }\r\n    nextQuestionHandler = () =>{\r\n        const {userAnswer, answer, score} = this.state\r\n        //alert(answer)\r\n        \r\n        if(userAnswer == answer){\r\n            this.setState({\r\n                score: score + 1\r\n            })\r\n        }\r\n        this.setState({\r\n            currentIndex: this.state.currentIndex + 1,\r\n            userAnswer: null\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.loadQuiz();\r\n    }\r\n    checkAnswer = answer => {\r\n        this.setState({\r\n            userAnswer: answer,\r\n            disabled: false\r\n        })\r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        const{currentIndex} = this.state;\r\n        if(this.state.currentIndex !== prevState.currentIndex){\r\n            this.setState(() => {\r\n                return {\r\n                    disabled: true,\r\n                    question: QuizData[currentIndex].question,\r\n                    options : QuizData[currentIndex].options,\r\n                    answer: QuizData[currentIndex].answer          \r\n                }\r\n            });\r\n    \r\n        }\r\n    }\r\n    //Check the answer\r\n    checkAnswer = answer => {\r\n        this.setState({\r\n            userAnswer: answer,\r\n            disabled:false\r\n    })\r\n    }   \r\n    finishHandler =() => {\r\n\r\n        \r\n        if(this.state.currentIndex === QuizData.length - 1){            \r\n            this.setState({\r\n                quizEnd:true\r\n            })\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    render(){\r\n        const{question, options, currentIndex, userAnswer, quizEnd} = this.state\r\n        if(quizEnd){            \r\n            if(this.state.score > 3){\r\n                \r\n                return(<div>\r\n                    <h1>  Конец. Количество баллов: {this.state.score} </h1>\r\n                    <h2>\r\n                        Много баллов, идите к врачу\r\n                    </h2>\r\n                </div>\r\n                )\r\n            } else{\r\n                return (\r\n                    <div>\r\n                    <h1>  Конец. Количество баллов: {this.state.score} </h1>\r\n                    <h2>Всё в порядке</h2>\r\n                    </div>\r\n                )\r\n            }\r\n            return (\r\n            <div>\r\n              <h1>  Конец. Количество баллов: {this.state.score} </h1>              \r\n              \r\n            </div>\r\n            )\r\n        }\r\n        \r\n        \r\n        return(\r\n            <div>\r\n                <h2>{question}</h2>\r\n                \r\n                <span>{`Вопрос ${currentIndex + 1} из ${QuizData.length}`} </span>\r\n                {\r\n                    options.map(option => \r\n                        <p key = {option.id} className={`options ${userAnswer === option? \"selected\": null}`} \r\n                        onClick = {() => this.checkAnswer(option)}                        \r\n                        >\r\n                            {option}\r\n                            \r\n                        </p>)\r\n                        \r\n                        \r\n                }\r\n                <h2>Количество баллов: {this.state.score}</h2>\r\n            {currentIndex < QuizData.length - 1 && \r\n            <button disabled = {this.state.disabled} onClick = {this.nextQuestionHandler}>\r\n                Дальше\r\n            </button>}\r\n\r\n            {currentIndex == QuizData.length - 1 &&\r\n            <button onClick ={this.finishHandler} disabled = {this.state.disabled}>\r\n                Конец\r\n\r\n            </button>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Quiz","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport Quiz from './Quiz'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz></Quiz>\n      \n    </div>\n  );\n}\n\nexport default App;\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App></App>, rootElement)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}